//
//  IdentifyProto.proto
//
//
//  Created by Brandon Toms on 3/23/21.
//
// https://github.com/libp2p/specs/blob/master/identify/README.md

/*

There are two variations of the identify protocol, identify and identify/push.

1) identify

    The identify protocol has the protocol id /ipfs/id/1.0.0, and it is used to query remote peers for their information.

    The protocol works by opening a stream to the remote peer you want to query, using /ipfs/id/1.0.0 as the protocol id string. The peer being identified responds by returning an Identify message and closes the stream.

2) identify/push

    The identify/push protocol has the protocol id /ipfs/id/push/1.0.0, and it is used to inform known peers about changes that occur at runtime.

    When a peer's basic information changes, for example, because they've obtained a new public listen address, they can use identify/push to inform others about the new information.

    The push variant works by opening a stream to each remote peer you want to update, using /ipfs/id/push/1.0.0 as the protocol id string. When the remote peer accepts the stream, the local peer will send an Identify message and close the stream.

    Upon recieving the pushed Identify message, the remote peer should update their local metadata repository with the information from the message. Note that missing fields should be ignored, as peers may choose to send partial updates containing only the fields whose values have changed.

 
 Parameters
 
 - protocolVersion
    
    The protocol version identifies the family of protocols used by the peer. The current protocol version is ipfs/0.1.0; if the protocol major or minor version does not match the protocol used by the initiating peer, then the connection is considered unusable and the peer must close the connection.

 - agentVersion

    This is a free-form string, identifying the implementation of the peer. The usual format is agent-name/version, where agent-name is the name of the program or library and version is its semantic version.

 - publicKey

    This is the public key of the peer, marshalled in binary form as specicfied in peer-ids.

 - listenAddrs

    These are the addresses on which the peer is listening as multi-addresses.

 - observedAddr

    This is the connection source address of the stream initiating peer as observed by the peer being identified; it is a multi-address. The initiator can use this address to infer the existence of a NAT and its public address.

    For example, in the case of a TCP/IP transport the observed addresses will be of the form /ip4/x.x.x.x/tcp/xx. In the case of a circuit relay connection, the observed address will be of the form /p2p/QmRelay/p2p-circuit. In the case of onion transport, there is no observable source address.

 - protocols

    This is a list of protocols supported by the peer.
 
 */
syntax = "proto2";

message Delta {
  // new protocols now serviced by the peer.
  repeated string added_protocols = 1;
  // protocols dropped by the peer.
  repeated string rm_protocols = 2;
}

message Identify {

  // protocolVersion determines compatibility between peers
  optional string protocolVersion = 5; // e.g. ipfs/1.0.0

  // agentVersion is like a UserAgent string in browsers, or client version in bittorrent
  // includes the client name and client.
  optional string agentVersion = 6; // e.g. go-ipfs/0.1.0

  // publicKey is this node's public key (which also gives its node.ID)
  // - may not need to be sent, as secure channel implies it has been sent.
  // - then again, if we change / disable secure channel, may still want it.
  optional bytes publicKey = 1;

  // listenAddrs are the multiaddrs the sender node listens for open connections on
  repeated bytes listenAddrs = 2;

  // oservedAddr is the multiaddr of the remote endpoint that the sender node perceives
  // this is useful information to convey to the other side, as it helps the remote endpoint
  // determine whether its connection to the local peer goes through NAT.
  optional bytes observedAddr = 4;

  // protocols are the services this node is running
  repeated string protocols = 3;

  // a delta update is incompatible with everything else. If this field is included, none of the others can appear.
  optional Delta delta = 7;

  // signedPeerRecord contains a serialized SignedEnvelope containing a PeerRecord,
  // signed by the sending node. It contains the same addresses as the listenAddrs field, but
  // in a form that lets us share authenticated addrs with other peers.
  // see github.com/libp2p/go-libp2p-core/record/pb/envelope.proto and
  // github.com/libp2p/go-libp2p-core/peer/pb/peer_record.proto for message definitions.
  optional bytes signedPeerRecord = 8;
}


